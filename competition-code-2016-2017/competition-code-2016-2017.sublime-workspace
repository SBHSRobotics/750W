{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"joy",
				"joystickGetAnalog"
			],
			[
				"in",
				"include"
			],
			[
				"JO",
				"JOY_RIGHT"
			],
			[
				"J",
				"JOY_LEFT"
			],
			[
				"JOY",
				"JOY_UP"
			],
			[
				"e",
				"extern"
			],
			[
				"mot",
				"motTest"
			],
			[
				"startMo",
				"startMotorTest"
			],
			[
				"star",
				"startAuton"
			],
			[
				"curr",
				"currentPage_sec"
			],
			[
				"au",
				"autIndex"
			],
			[
				"aut",
				"AutonMode"
			],
			[
				"Auton",
				"AutonMode"
			],
			[
				"LC",
				"LCD_BTN_LEFT"
			],
			[
				"startAuton",
				"startAutonSel"
			],
			[
				"L",
				"LCD_BTN_CENTER"
			],
			[
				"LCD_BT",
				"LCD_BTN_CENTER"
			],
			[
				"input",
				"input_sec"
			],
			[
				"currentPage",
				"currentPage_sec"
			],
			[
				"teh",
				"thetaTemp"
			],
			[
				"theta",
				"thetaAddition"
			],
			[
				"the",
				"thetaTemp"
			],
			[
				"int",
				"INPUT_THRESHOLD"
			],
			[
				"FPS",
				"FPSBase"
			],
			[
				"FP",
				"FPSBase"
			],
			[
				"gyro",
				"gyroscope"
			],
			[
				"TAK",
				"TASK_DEFAULT_STACK_SIZE"
			]
		]
	},
	"buffers":
	[
		{
			"contents": " #pragma once\n/**\n * @file port_assignments.h\n *\n * @brief Assigns all ports\n *\n * All naming is based upon the current front of the bot\n */\n\n\n/** \n *	Base Motors\n */\n #define MOTOR_BASE_TOP_LEFT 3 // Base : Front Left Motor\n #define MOTOR_BASE_BOT_LEFT 4 // Base : Back Left Motor\n #define MOTOR_BASE_TOP_RIGHT 5 // Base : Front Right Motor\n #define MOTOR_BASE_TOP_RIGHT 6 // Base : Back Right Motor\n\n\n/**\n *	Claw Motors\n */\n #define MOTOR_CLAW_GRAB 7 // Claw Motor : Grabber Hand\n #define MOTOR_CLAW ",
			"file": "include/port_assignments.h",
			"file_size": 419,
			"file_write_time": 131057219813372742,
			"settings":
			{
				"buffer_size": 502,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#pragma once\n\n/**\n * Includes\n */\n#include <math.h>\n#include \"API.h\"\n\n/**\n *	Object Definitions \n */\n\n/** \n *	@enum Direction\n *  @brief angle bot is facing \n *	\n *	Describes the Direction the bot is facing relative to the field.\n */\ntypedef struct Direction\n{\n	int chX;\n	int chY;\n}Direction;\n\n/**\n *	@enum Axis\n *	@brief The direction of motion of the robot\n *\n *	Describes the motion of the robot including if it is not moving.\n *	Does not distinguish between directions of motion but instead of the type of motion.\n */\ntypedef enum Axis\n{\n	/** The robot is not moving */\n	none,\n	/** The robot is moving along its X-Axis */\n	axisX,\n	/**The robot is moving along its Y-Axis */\n	axisY,\n	/**The robot is moving in a direction different from X and Y*/\n	axisBoth,\n	 /**The robot is turning in place*/\n	axisTurn\n}Axis;\n\n/**\n * @struct Correction\n * @brief This is used to describe the location of the robot\n *\n *\n * Describes the location of the robot relative to the last local reset as well as relative to the orientation\n * from when it was first booted\n */\ntypedef struct Correction\n{\n	/**\n	* The angle of the robot in respect to the orientation of the robot when it was turned on\n	*/\n	int globalAngle;\n	/**\n	 * The angle of the robot in respect to the last reset. Is used for convenience in angle calculations\n	 * over globalAngle\n	 */\n	int localAngle;\n}Correction;\n\n/**\n * @struct Base\n * @brief This describes the characteristics of the base of the robot\n *\n * This describes the rotation of the left and right side of the robot,\n * its current orientation as well as direction of motion\n */\ntypedef struct Base\n{\n	/** The speed that the left designation of the robot should/is set to */\n	int left;\n	/** The speed that the right designation of the robot should/is set to */\n	int right;\n	/** The angle of the robot */\n	Correction correction;\n	/** The type of movement of the robot */\n	Axis axis;\n\n	Direction direction;\n}Base;\n\n/**\n * @struct Location\n * @brief Coordinates of the Bot\n * \n * Describes the exact location of the bot and its position relative to the field\n */\ntypedef struct Location\n{\n	int x;\n	int y;\n}Location;\n\n/*\n *	Global Variable Declarations\n */\n\n\n/*\n * @def TIME_DELAY	\n * @brief milliseconds between iterations of cortex\n *\n *	Defines the spacing between each iteration of the Cortex. Defined in milliseconds.\n */\n#define TIME_DELAY 20\n\n/*\n * @def MAX_SPEED\n * This is the max speed that can be sent to a motor\n * @def INPUT_THRESHOLD\n * This is the minimum amount of power that can be sent to\n * 		a motor. If below this then it is zero effectively.\n */\n#define MAX_SPEED 127\n#define INPUT_THRESHOLD 15",
			"file": "include/generic_global.h",
			"file_size": 2462,
			"file_write_time": 131057233694090085,
			"settings":
			{
				"buffer_size": 2628,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/opcontrol.c",
			"settings":
			{
				"buffer_size": 7085,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"utility_methods.h\"\n\nint sgn (float i)\n{\n	return (i > 0 ? 1 : i < 0 ? -1 : 0);\n}\n\nint sgnSimple(float i)\n{\n	return (i < 0 ? -1 : 1);\\\n}\n\nint sgnSimpleOther(float i)\n{\n	return (i > 0 ? 1 : -1);\n}\n\nfloat avg(int a, int b)\n{\n	return (a + b) / 2.0f + 0.5f;\n}\n\nfloat avgNums(int nums[]) {\n	int size = sizeof(nums) / sizeof(nums[0]);\n	int sum = 0;\n	for (int i = 0; i < size; i++)\n		sum += nums[i];\n	return ((float)sum) / size;\n}\n\nfloat absAvg(int a, int b) {\n	return (abs(a) + abs(b)) / 2.0f;\n}\n\nfloat absAvgNums(int nums[]) {\n	int size = sizeof(nums) / sizeof(nums[0]);\n	int sum = 0;\n	for (int i = 0; i < size; ++i)\n		sum += abs(nums[i]);\n	return ((float)sum) / size;\n}\n\nint* absNums(int nums[]) {\n	int size = sizeof(nums) / sizeof(nums[0]);\n	for (int i = 0; i < size; ++i)\n		nums[i] = abs(nums[i]);\n	return nums;\n}\n\nbool adjustSpeedSpecific(int* speed, int old,\n		int minIncFast, int maxIncFast,\n		int minIncSlow, int maxIncSlow) {\n\n	int direction = ( sgn(*speed) == sgn(old) ? sgnSimpleOther(abs(*speed) - abs(old)) : -1 );// ( sgn(*speed) ? (1) : (-1) ) );\n\n	if (direction == 1) {//fast change, going further from zero\n		return adjustSpeed(speed, old, minIncFast, maxIncFast);\n	}\n\n	//slow change, going toward zero\n	return adjustSpeed(speed, old, minIncSlow, maxIncSlow);\n}\n\nbool adjustSpeed(int* speed, int old, int minInc, int maxInc) {\n	int diffS = *speed - old;\n	int sgnS = sgn(diffS);\n\n	if (abs(diffS) > minInc){\n		if (abs(diffS) > maxInc)\n			diffS = sgnS * maxInc;\n		*speed += diffS;\n		if (abs(*speed) > MAX_SPEED)\n			*speed = sgnS * MAX_SPEED;\n		if (abs(*speed) < INPUT_THRESHOLD)\n			*speed = 0;\n		return true;\n	}\n	return false;\n}\n\nint adjustInputBtns(int input, bool* b1Pressed, bool* b2Pressed, bool* b3Pressed, bool* b4Pressed) {\n\n	if (!*b1Pressed)\n	{\n		if (input & HOTKEY_POS_0)\n			*b1Pressed = true;\n	}\n	else if (*b1Pressed)\n	{\n		if (!(input & HOTKEY_POS_0))\n			*b1Pressed = false;\n		else\n			input ^= HOTKEY_POS_0;\n	}\n\n	if (!*b2Pressed)\n	{\n		if (input & HOTKEY_POS_1)\n			*b2Pressed = true;\n	}\n	else if (*b2Pressed)\n	{\n		if (!(input & HOTKEY_POS_1))\n			*b2Pressed = false;\n		else\n			input ^= HOTKEY_POS_1;\n	}\n\n	if (!*b3Pressed)\n	{\n		if (input & HOTKEY_POS_2)\n			*b3Pressed = true;\n	}\n	else if (*b3Pressed)\n	{\n		if (!(input & HOTKEY_POS_2))\n			*b3Pressed = false;\n		else\n			input ^= HOTKEY_POS_2;\n	}\n\n	if (!*b4Pressed)\n	{\n		if (input & HOTKEY_POS_3)\n			*b4Pressed = true;\n	}\n	else if (*b4Pressed)\n	{\n		if (!(input & HOTKEY_POS_3))\n			*b4Pressed = false;\n		else\n			input ^= HOTKEY_POS_3;\n	}\n\n	return input;\n}",
			"file": "src/utility.c",
			"file_size": 0,
			"file_write_time": 131057234385483290,
			"settings":
			{
				"buffer_size": 2524,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/** @file auto.c\n * @brief File for autonomous code\n *\n * This file should contain the user autonomous() function and any functions related to it.\n *\n * Copyright (c) 2011-2014, Purdue University ACM SIG BOTS.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of Purdue University ACM SIG BOTS nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL PURDUE UNIVERSITY ACM SIG BOTS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Purdue Robotics OS contains FreeRTOS (http://www.freertos.org) whose source code may be\n * obtained from http://sourceforge.net/projects/freertos/files/ or on request.\n */\n\n#include \"main.h\"\n\n/*\n * Runs the user autonomous code. This function will be started in its own task with the default\n * priority and stack size whenever the robot is enabled via the Field Management System or the\n * VEX Competition Switch in the autonomous mode. If the robot is disabled or communications is\n * lost, the autonomous task will be stopped by the kernel. Re-enabling the robot will restart\n * the task, not re-start it from where it left off.\n *\n * Code running in the autonomous task cannot access information from the VEX Joystick. However,\n * the autonomous function can be invoked from another task if a VEX Competition Switch is not\n * available, and it can access joystick information if called in this way.\n *\n * The autonomous task may exit, unlike operatorControl() which should never exit. If it does\n * so, the robot will await a switch to another mode or disable/enable cycle.\n */\nvoid autonomous() {\n\n}\n",
			"file": "src/auto.c",
			"file_size": 2929,
			"file_write_time": 131035022555062736,
			"settings":
			{
				"buffer_size": 2878,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 265.0,
		"last_filter": "Toggle",
		"selected_items":
		[
			[
				"Toggle",
				"View: Toggle Side Bar"
			],
			[
				"",
				"Build With: PROS"
			],
			[
				"pros",
				"Build With: PROS"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"clean",
				"Build With: PROS - Clean"
			],
			[
				"upl",
				"Build With: PROS - Upload"
			],
			[
				"packages",
				"Package Control: List Packages"
			],
			[
				"make",
				"Set Syntax: Makefile"
			],
			[
				"upload",
				"Build With: PROS - Upload"
			],
			[
				"pros clean",
				"Build With: PROS - Clean"
			],
			[
				"todo",
				"TodoReview: Project and Open Files"
			],
			[
				"package rem",
				"Package Control: Remove Package"
			],
			[
				"task",
				"Tasks: New document"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pac inst",
				"Package Control: Install Package"
			],
			[
				"package remove",
				"Package Control: Remove Package"
			],
			[
				"uplaod",
				"Build With: PROS - Upload"
			],
			[
				"make clean",
				"Build With: Make - Clean"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"comme",
				"Toggle Comment"
			],
			[
				"Make",
				"Build With: Make"
			],
			[
				"Make Clean",
				"Build With: Make - Clean"
			],
			[
				"Make - Clean",
				"Build With: Make - Clean"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"pros",
			"make",
			"make upload",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"Make Upload",
			"Make",
			"make"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Suthikshnan Karthik/Documents/competition-code-2016-2017/include",
		"/C/Users/Suthikshnan Karthik/Documents/competition-code-2016-2017/src"
	],
	"file_history":
	[
		"/C/Users/Suthikshnan Karthik/Documents/competition-code-2016-2017/include/utility.h",
		"/C/Users/Suthikshnan Karthik/Documents/competition-code-2016-2017/include/API.h",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/include/utility_methods.h",
		"/C/Users/Suthikshnan Karthik/Documents/competition-code-2016-2017/include/controller.h",
		"/C/Users/Suthikshnan Karthik/Documents/competition-code-2016-2017/src/init.c",
		"/C/Users/Suthikshnan Karthik/Documents/competition-code-2016-2017/src/opcontrol.c",
		"/C/Users/Suthikshnan Karthik/Documents/competition-code-2016-2017/include/main.h",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/include/global_variable_initialization.h",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/src/relative_and_global_angle.c",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/include/FPS.h",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/src/lcd.c",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/src/init.c",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/src/opcontrol.c",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/src/base.c",
		"/C/Users/Suthikshnan Karthik/Documents/Competition Code 2/src/FPS.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime 2/Competition Code 2/include/relative_and_global_angle.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime 2/Competition Code 2/include/global_variable_initialization.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime 2/Competition Code 2/src/rotor.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime 2/Competition Code 2/include/base.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/init.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/opcontrol.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/include/API.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/lcd.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/relative_and_global_angle.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/base.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/FPS.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/include/global_variable_initialization.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/include/relative_and_global_angle.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/rotor.c",
		"/C/Users/Akramjit/AppData/Roaming/Sublime Text 3/Packages/Arduino-like IDE/app/serial_monitor.py",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/include/base.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/auto.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/intake.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/autonomous_controller.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/src/shooter.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/PROSe IDE/Competition Code 2/include/Competition Code 2.sublime-project",
		"/C/Users/Akramjit/AppData/Roaming/Sublime Text 3/Packages/User/arduino-cli.sublime-settings",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/Competition Code 2/src/opcontrol.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/Competition Code 2/src/FPS.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/Competition Code 2/Makefile",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/Competition Code 2/src/autonomous_utility_methods.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/Competition Code 2/src/lcd.c",
		"/C/Users/Akramjit/AppData/Roaming/Sublime Text 3/Packages/User/Vex.sublime-build",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/Competition Code 2/include/FPS.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/CCII/include/API.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/CCII/src/init.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/CCII/Makefile",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/CCII/include/main.h",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/CCII/src/auto.c",
		"/C/Users/Akramjit/Desktop/USB/Robotics/2015 - 2016/PROSe/Sublime/CCII/CCII.sublime-project"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 117.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"5",
			"JOY",
			"= 0",
			"ch",
			"sch",
			"extern",
			"currentPage",
			"startMotor",
			"currentPage",
			"LCD_BTN",
			"Base",
			"FPSBase",
			"gyroOffset",
			"getLocal",
			"getGlobalAngle",
			"baseAngle",
			"FPSbase",
			"Gyroscope",
			"gyroscope",
			"uart1",
			"autonomous_controller",
			"printf"
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"uart2"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "include/port_assignments.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 502,
						"regions":
						{
						},
						"selection":
						[
							[
								502,
								502
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "include/generic_global.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2628,
						"regions":
						{
						},
						"selection":
						[
							[
								2628,
								2628
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 390.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/opcontrol.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7085,
						"regions":
						{
						},
						"selection":
						[
							[
								6297,
								6297
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 1469.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/utility.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2524,
						"regions":
						{
						},
						"selection":
						[
							[
								142,
								142
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 117.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/auto.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2878,
						"regions":
						{
						},
						"selection":
						[
							[
								2874,
								2874
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "competition-code-2016-2017.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"op",
				"Source Files\\opcontrol.c"
			],
			[
				"fps",
				"Include Files\\FPS.h"
			],
			[
				"glo",
				"Include Files\\global_variable_initialization.h"
			],
			[
				"rel",
				"Source Files\\relative_and_global_angle.c"
			],
			[
				"ang",
				"Include Files\\relative_and_global_angle.h"
			],
			[
				"lo",
				"Include Files\\global_variable_initialization.h"
			],
			[
				"rotor",
				"Source Files\\rotor.c"
			],
			[
				"base",
				"Source Files\\base.c"
			],
			[
				"base.h",
				"Include Files\\base.h"
			],
			[
				"llo",
				"Include Files\\relative_and_global_angle.h"
			],
			[
				"lcd",
				"Source Files\\lcd.c"
			],
			[
				"lcd.c",
				"Source Files\\lcd.c"
			],
			[
				"api",
				"Include Files\\API.h"
			],
			[
				"init",
				"Source Files\\init.c"
			],
			[
				"globa",
				"Include Files\\global_variable_initialization.h"
			],
			[
				"intake",
				"Source Files\\intake.c"
			],
			[
				"base.c",
				"Source Files\\base.c"
			],
			[
				"shooter.c",
				"Source Files\\shooter.c"
			],
			[
				"shot.c",
				"Source Files\\shooter.c"
			],
			[
				"",
				"src\\base.c"
			],
			[
				"go",
				"include\\global_variable_initialization.h"
			],
			[
				"make",
				"Makefile"
			],
			[
				"opcon",
				"src\\opcontrol.c"
			],
			[
				"opcont",
				"src\\opcontrol.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 146.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
